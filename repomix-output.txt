This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
src/
  app/
    about/
      page.tsx
    api/
      auth/
        [...nextauth]/
          route.ts
        signin/
          page.tsx
      checkout/
        route.ts
      contact/
        route.ts
      products/
        [id]/
          route.ts
        route.ts
    cart/
      page.tsx
    contact/
      page.tsx
    products/
      [id]/
        page.tsx
      page.tsx
    globals.css
    layout.tsx
    page.tsx
  components/
    AuthProvider.tsx
    CartItem.tsx
    CheckoutButton.tsx
    ErrorBoundary.tsx
    ErrorMessage.tsx
    Footer.tsx
    LoadingSpinner.tsx
    Navigation.tsx
    ProductCard.tsx
  contexts/
    CartContext.tsx
  hooks/
    useHook.ts
    useProducts.ts
  providers/
    AuthProvider.tsx
.gitignore
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
README.md
tsconfig.json

================================================================
Files
================================================================

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: src/app/about/page.tsx
================
import Image from "next/image"
import Link from "next/link"
import { Leaf, Award, Users } from "lucide-react"

export default function AboutPage() {
  return (
    <div className="flex flex-col min-h-screen">
      <header className="bg-blue-800 text-white py-4">
        <div className="container mx-auto px-4 flex justify-between items-center">
          <Link href="/" className="text-2xl font-bold">
            SkinGlow
          </Link>
          <nav className="hidden md:flex space-x-6">
            <Link href="/products" className="hover:text-blue-200">
              Products
            </Link>
            <Link href="/about" className="hover:text-blue-200">
              About
            </Link>
            <Link href="/contact" className="hover:text-blue-200">
              Contact
            </Link>
          </nav>
        </div>
      </header>

      <main className="flex-grow">
        {/* Hero Section */}
        <section className="bg-blue-100 py-16">
          <div className="container mx-auto px-4">
            <div className="max-w-3xl mx-auto text-center">
              <h1 className="text-4xl font-bold mb-6">Our Story</h1>
              <p className="text-xl mb-8">
                Founded in 2022, SkinGlow was born from a passion for natural skincare and a commitment to environmental sustainability.
              </p>
            </div>
          </div>
        </section>

        {/* Our Mission */}
        <section className="py-16">
          <div className="container mx-auto px-4">
            <div className="flex flex-col md:flex-row items-center gap-12">
              <div className="md:w-1/2">
                <Image
                  src="/placeholder.svg"
                  alt="Our mission"
                  width={600}
                  height={400}
                  className="rounded-lg shadow-lg"
                />
              </div>
              <div className="md:w-1/2">
                <h2 className="text-3xl font-bold mb-6">Our Mission</h2>
                <p className="mb-4">
                  At SkinGlow, we believe that skincare should be simple, effective, and kind to both your skin and the planet.
                </p>
                <p className="mb-4">
                  Our mission is to create premium quality skincare products using only natural, ethically sourced ingredients that deliver real results.
                </p>
                <p>
                  We're committed to transparency, sustainability, and creating products that help you achieve your healthiest skin ever.
                </p>
              </div>
            </div>
          </div>
        </section>

        {/* Our Values */}
        <section className="bg-blue-50 py-16">
          <div className="container mx-auto px-4">
            <h2 className="text-3xl font-bold mb-12 text-center">Our Values</h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
              <div className="bg-white p-8 rounded-lg shadow-md">
                <div className="flex justify-center mb-4">
                  <Leaf size={48} className="text-blue-600" />
                </div>
                <h3 className="text-xl font-semibold mb-4 text-center">Sustainability</h3>
                <p className="text-gray-600">
                  We're committed to minimizing our environmental footprint through sustainable sourcing, eco-friendly packaging, and responsible manufacturing practices.
                </p>
              </div>
              
              <div className="bg-white p-8 rounded-lg shadow-md">
                <div className="flex justify-center mb-4">
                  <Award size={48} className="text-blue-600" />
                </div>
                <h3 className="text-xl font-semibold mb-4 text-center">Quality</h3>
                <p className="text-gray-600">
                  We never compromise on quality. Each product is carefully formulated, rigorously tested, and made with the finest natural ingredients available.
                </p>
              </div>
              
              <div className="bg-white p-8 rounded-lg shadow-md">
                <div className="flex justify-center mb-4">
                  <Users size={48} className="text-blue-600" />
                </div>
                <h3 className="text-xl font-semibold mb-4 text-center">Community</h3>
                <p className="text-gray-600">
                  We believe in building a community of conscious consumers and giving back through partnerships with environmental and social initiatives.
                </p>
              </div>
            </div>
          </div>
        </section>

        {/* Meet Our Team */}
        <section className="py-16">
          <div className="container mx-auto px-4">
            <h2 className="text-3xl font-bold mb-12 text-center">Meet Our Team</h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
              {[
                { name: "Emily Chen", role: "Founder & CEO", bio: "With over 15 years in natural skincare formulation, Emily founded SkinGlow to make clean beauty accessible to everyone." },
                { name: "David Rodriguez", role: "Head of Product Development", bio: "David's background in organic chemistry and herbalism helps us create effective, plant-based formulations." },
                { name: "Sarah Johnson", role: "Sustainability Director", bio: "Sarah ensures our operations and supply chain meet the highest standards of environmental responsibility." },
              ].map((member, index) => (
                <div key={index} className="text-center">
                  <div className="w-40 h-40 rounded-full bg-blue-100 mx-auto mb-4 overflow-hidden">
                    <Image
                      src="/placeholder.svg"
                      alt={member.name}
                      width={160}
                      height={160}
                      className="w-full h-full object-cover"
                    />
                  </div>
                  <h3 className="text-xl font-semibold mb-2">{member.name}</h3>
                  <p className="text-blue-600 mb-4">{member.role}</p>
                  <p className="text-gray-600">{member.bio}</p>
                </div>
              ))}
            </div>
          </div>
        </section>
      </main>

      <footer className="bg-blue-800 text-white py-8">
        <div className="container mx-auto px-4 text-center">&copy; 2025 SkinGlow. All rights reserved.</div>
      </footer>
    </div>
  )
}

================
File: src/app/api/auth/[...nextauth]/route.ts
================
// src/app/api/auth/[...nextauth]/route.ts
import NextAuth from 'next-auth';
import CredentialsProvider from 'next-auth/providers/credentials';
import GoogleProvider from 'next-auth/providers/google';

const handler = NextAuth({
  providers: [
    CredentialsProvider({
      name: 'Credentials',
      credentials: {
        email: { label: "Email", type: "email" },
        // src/app/api/auth/[...nextauth]/route.ts (continued)
        password: { label: "Password", type: "password" }
      },
      async authorize(credentials) {
        // Here you would normally check credentials against your database
        // This is a simplified example
        if (credentials?.email === 'test@example.com' && credentials?.password === 'password') {
          return {
            id: '1',
            name: 'Test User',
            email: 'test@example.com',
          };
        }
        return null;
      }
    }),
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID || '',
      clientSecret: process.env.GOOGLE_CLIENT_SECRET || '',
    }),
  ],
  pages: {
    signIn: '/auth/signin',
    signOut: '/auth/signout',
    error: '/auth/error',
    verifyRequest: '/auth/verify-request',
  },
  session: {
    strategy: 'jwt',
  },
  callbacks: {
    async session({ session, token }) {
      // Add user ID to session
      if (session.user && token.sub) {
        session.user.id = token.sub;
      }
      return session;
    },
  },
});

export { handler as GET, handler as POST };

================
File: src/app/api/auth/signin/page.tsx
================
// src/app/auth/signin/page.tsx
'use client';

import { useState } from 'react';
import { signIn } from 'next-auth/react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';

export default function SignIn() {
  const router = useRouter();
  const [formData, setFormData] = useState({
    email: '',
    password: '',
  });
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError('');

    try {
      const result = await signIn('credentials', {
        redirect: false,
        email: formData.email,
        password: formData.password,
      });

      if (result?.error) {
        setError('Invalid email or password');
        return;
      }

      router.push('/');
      router.refresh();
    } catch (error) {
      setError('An error occurred. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">Sign in to your account</h2>
          <p className="mt-2 text-center text-sm text-gray-600">
            Or{' '}
            <Link href="/auth/signup" className="font-medium text-blue-600 hover:text-blue-500">
              create a new account
            </Link>
          </p>
        </div>

        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
            <span className="block sm:inline">{error}</span>
          </div>
        )}

        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="rounded-md shadow-sm -space-y-px">
            <div>
              <label htmlFor="email" className="sr-only">
                Email address
              </label>
              <input
                id="email"
                name="email"
                type="email"
                autoComplete="email"
                required
                value={formData.email}
                onChange={handleChange}
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm"
                placeholder="Email address"
              />
            </div>
            <div>
              <label htmlFor="password" className="sr-only">
                Password
              </label>
              <input
                id="password"
                name="password"
                type="password"
                autoComplete="current-password"
                required
                value={formData.password}
                onChange={handleChange}
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm"
                placeholder="Password"
              />
            </div>
          </div>

          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <input
                id="remember-me"
                name="remember-me"
                type="checkbox"
                className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
              />
              <label htmlFor="remember-me" className="ml-2 block text-sm text-gray-900">
                Remember me
              </label>
            </div>

            <div className="text-sm">
              <a href="#" className="font-medium text-blue-600 hover:text-blue-500">
                Forgot your password?
              </a>
            </div>
          </div>

          <div>
            <button
              type="submit"
              disabled={isLoading}
              className={`group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white ${
                isLoading ? 'bg-blue-400' : 'bg-blue-600 hover:bg-blue-700'
              } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500`}
            >
              {isLoading ? 'Signing in...' : 'Sign in'}
            </button>
          </div>

          <div className="mt-6">
            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-300"></div>
              </div>
              <div className="relative flex justify-center text-sm">
                <span className="px-2 bg-gray-50 text-gray-500">Or continue with</span>
              </div>
            </div>

            <div className="mt-6 grid grid-cols-1 gap-3">
              <button
                onClick={() => signIn('google', { callbackUrl: '/' })}
                className="w-full inline-flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
              >
                <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12.545 10.239v3.821h5.445c-.712 2.315-2.647 3.972-5.445 3.972-3.332 0-6.033-2.701-6.033-6.032s2.701-6.032 6.033-6.032c1.498 0 2.866.549 3.921 1.453l2.814-2.814C17.503 2.988 15.139 2 12.545 2 7.021 2 2.543 6.477 2.543 12s4.478 10 10.002 10c8.396 0 10.249-7.85 9.426-11.748l-9.426-.013z" />
                </svg>
                Google
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>
  );
}

================
File: src/app/api/checkout/route.ts
================
// src/app/api/checkout/route.ts
import { NextResponse } from 'next/server';
import Stripe from 'stripe';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY || '', {
  apiVersion: '2023-10-16',
});

export async function POST(request: Request) {
  try {
    const body = await request.json();
    const { items, shippingDetails } = body;
    
    if (!items || items.length === 0) {
      return NextResponse.json(
        { error: 'No items provided' },
        { status: 400 }
      );
    }
    
    // Transform cart items to Stripe line items
    const lineItems = items.map((item: any) => ({
      price_data: {
        currency: 'usd',
        product_data: {
          name: item.name,
          images: [item.image.startsWith('http') ? item.image : `${process.env.NEXT_PUBLIC_API_URL}${item.image}`],
        },
        unit_amount: Math.round(item.price * 100), // Stripe uses cents
      },
      quantity: item.quantity,
    }));
    
    // Create Stripe checkout session
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      line_items: lineItems,
      mode: 'payment',
      success_url: `${process.env.NEXT_PUBLIC_API_URL}/checkout/success?session_id={CHECKOUT_SESSION_ID}`,
      cancel_url: `${process.env.NEXT_PUBLIC_API_URL}/cart`,
      shipping_address_collection: {
        allowed_countries: ['US', 'CA', 'GB'], // Customize as needed
      },
      // Store customer information in metadata
      metadata: {
        customer_email: shippingDetails?.email || '',
        customer_name: shippingDetails?.name || '',
      },
    });
    
    return NextResponse.json({ sessionId: session.id, url: session.url });
  } catch (error) {
    console.error('Error creating checkout session:', error);
    return NextResponse.json(
      { error: 'Failed to create checkout session' },
      { status: 500 }
    );
  }
}

================
File: src/app/api/contact/route.ts
================
// src/app/api/contact/route.ts
import { NextResponse } from 'next/server';

export async function POST(request: Request) {
  try {
    const formData = await request.json();
    const { name, email, message } = formData;
    
    // Validate form data
    if (!name || !email || !message) {
      return NextResponse.json(
        { error: 'All fields are required' },
        { status: 400 }
      );
    }
    
    // Here you would typically:
    // 1. Save the message to a database
    // 2. Send an email notification
    // 3. Maybe create a support ticket
    
    // For now, we'll just simulate success
    console.log('Contact form submission:', { name, email, message });
    
    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Error processing contact form:', error);
    return NextResponse.json(
      { error: 'Failed to process contact form' },
      { status: 500 }
    );
  }
}

================
File: src/app/api/products/[id]/route.ts
================
// src/app/api/products/[id]/route.ts
import { NextResponse } from 'next/server';

// Mock product database (replace with real DB later)
const products = [
  {
    id: 1,
    name: "Hydrating Facial Cleanser",
    category: "Cleansers",
    price: 18.99,
    rating: 5,
    image: "/images/products/cleanser.jpg",
    description: "Gentle, effective formula suitable for all skin types",
    longDescription: "Our Hydrating Facial Cleanser is specially formulated...",
    ingredients: "Water, Glycerin, Sodium Cocoyl Isethionate...",
    directions: "Apply to damp skin, massage gently, rinse thoroughly."
  },
  // ... other products
];

export async function GET(
  request: Request,
  { params }: { params: { id: string } }
) {
  const id = parseInt(params.id, 10);
  const product = products.find(p => p.id === id);
  
  if (!product) {
    return NextResponse.json(
      { error: 'Product not found' },
      { status: 404 }
    );
  }
  
  return NextResponse.json(product);
}

================
File: src/app/api/products/route.ts
================
// src/app/api/products/route.ts
import { NextResponse } from 'next/server';

// You'll want to replace this with a database call eventually
const products = [
  {
    id: 1,
    name: "Hydrating Facial Cleanser",
    category: "Cleansers",
    price: 18.99,
    rating: 5,
    image: "/images/products/cleanser.jpg",
    description: "Gentle, effective formula suitable for all skin types"
  },
  // ... other products
];

export async function GET() {
  return NextResponse.json(products);
}

================
File: src/app/cart/page.tsx
================
// src/app/cart/page.tsx
'use client';

import { useCart } from '@/contexts/CartContext';
import CheckoutButton from '@/components/CheckoutButton';
import CartItem from '@/components/CartItem';
import Link from 'next/link';
import { ArrowRight } from 'lucide-react';

export default function CartPage() {
  const { state, dispatch } = useCart();
  
  // Calculate shipping fee
  const shipping = state.subtotal > 50 ? 0 : 5.99;
  
  // Total
  const total = state.subtotal + shipping;
  
  return (
    <div className="bg-gray-50 py-8">
      <div className="container mx-auto px-4">
        <h1 className="text-3xl font-bold mb-8">Your Cart</h1>
        
        {state.items.length === 0 ? (
          <div className="bg-white rounded-lg shadow-sm p-8 text-center">
            <h2 className="text-xl mb-4">Your cart is empty</h2>
            <p className="text-gray-600 mb-6">Looks like you haven't added any products to your cart yet.</p>
            <Link 
              href="/products" 
              className="inline-flex items-center bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700"
            >
              Continue Shopping <ArrowRight className="ml-2 h-4 w-4" />
            </Link>
          </div>
        ) : (
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* Cart Items */}
            <div className="lg:col-span-2">
              <div className="bg-white rounded-lg shadow-sm overflow-hidden">
                <div className="hidden md:grid grid-cols-12 gap-4 p-4 border-b text-sm font-medium">
                  <div className="col-span-6">Product</div>
                  <div className="col-span-2 text-center">Price</div>
                  <div className="col-span-2 text-center">Quantity</div>
                  <div className="col-span-2 text-center">Total</div>
                </div>
                
                {state.items.map((item) => (
                  <CartItem key={item.id} item={item} />
                ))}
              </div>
              
              <div className="mt-4 flex justify-between">
                <Link href="/products" className="text-blue-600 hover:text-blue-800 flex items-center">
                  ← Continue Shopping
                </Link>
                <button 
                  onClick={() => dispatch({ type: 'CLEAR_CART' })}
                  className="text-red-600 hover:text-red-800 flex items-center"
                >
                  Clear Cart
                </button>
              </div>
            </div>
            
            {/* Order Summary */}
            <div className="lg:col-span-1">
              <div className="bg-white rounded-lg shadow-sm p-6">
                <h2 className="text-xl font-bold mb-4">Order Summary</h2>
                
                <div className="space-y-3 mb-6">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Subtotal</span>
                    <span>${state.subtotal.toFixed(2)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Shipping</span>
                    <span>{shipping === 0 ? "Free" : `$${shipping.toFixed(2)}`}</span>
                  </div>
                  {shipping > 0 && (
                    <div className="text-sm text-gray-500">
                      Free shipping on orders over $50
                    </div>
                  )}
                  <div className="border-t pt-3 mt-3 flex justify-between font-bold">
                    <span>Total</span>
                    <span>${total.toFixed(2)}</span>
                  </div>
                </div>
                
                <CheckoutButton />
                
                <div className="mt-6">
                  <h3 className="font-semibold mb-2">We Accept</h3>
                  <div className="flex space-x-2">
                    <img src="/images/payments/visa.svg" alt="Visa" className="h-8" />
                    <img src="/images/payments/mastercard.svg" alt="Mastercard" className="h-8" />
                    <img src="/images/payments/paypal.svg" alt="PayPal" className="h-8" />
                    <img src="/images/payments/applepay.svg" alt="Apple Pay" className="h-8" />
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

================
File: src/app/contact/page.tsx
================
// src/app/contact/page.tsx
'use client';

import { useState, FormEvent } from 'react';

const ContactForm = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    message: ''
  });
  
  const [status, setStatus] = useState<{
    type: 'success' | 'error' | null;
    message: string;
  }>({
    type: null,
    message: ''
  });
  
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };
  
  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setStatus({ type: null, message: '' });
    
    try {
      const response = await fetch('/api/contact', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || 'Something went wrong');
      }
      
      // Reset form on success
      setFormData({ name: '', email: '', message: '' });
      setStatus({
        type: 'success',
        message: 'Thank you for your message! We will get back to you soon.'
      });
    } catch (error) {
      setStatus({
        type: 'error',
        message: error instanceof Error ? error.message : 'Failed to send message'
      });
    } finally {
      setIsSubmitting(false);
    }
  };
  
  return (
    <div className="bg-gray-900 py-12 rounded-lg">
      <div className="max-w-2xl mx-auto px-6">
        <h1 className="text-3xl font-bold mb-8 text-center text-white">Contact Us</h1>
        
        {status.type === 'success' && (
          <div className="bg-green-500 text-white p-4 rounded-lg mb-6">
            {status.message}
          </div>
        )}
        
        {status.type === 'error' && (
          <div className="bg-red-500 text-white p-4 rounded-lg mb-6">
            {status.message}
          </div>
        )}
        
        <form className="space-y-6" onSubmit={handleSubmit}>
          <div>
            <label htmlFor="name" className="block text-sm font-medium text-gray-200 mb-1">
              Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={formData.name}
              onChange={handleChange}
              className="mt-1 block w-full rounded-md border-gray-700 bg-gray-800 text-white shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-500 focus:ring-opacity-50"
              required
            />
          </div>
          
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-200 mb-1">
              Email
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              className="mt-1 block w-full rounded-md border-gray-700 bg-gray-800 text-white shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-500 focus:ring-opacity-50"
              required
            />
          </div>
          
          <div>
            <label htmlFor="message" className="block text-sm font-medium text-gray-200 mb-1">
              Message
            </label>
            <textarea
              id="message"
              name="message"
              rows={4}
              value={formData.message}
              onChange={handleChange}
              className="mt-1 block w-full rounded-md border-gray-700 bg-gray-800 text-white shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-500 focus:ring-opacity-50"
              required
            ></textarea>
          </div>
          
          <div>
            <button
              type="submit"
              disabled={isSubmitting}
              className={`w-full py-3 px-4 rounded-lg hover:bg-blue-700 transition duration-300 font-medium ${
                isSubmitting ? 'bg-blue-400 cursor-not-allowed' : 'bg-blue-600'
              } text-white`}
            >
              {isSubmitting ? 'Sending...' : 'Send Message'}
            </button>
          </div>
        </form>
        
        {/* Store Information */}
        <div className="mt-16">
          <h2 className="text-2xl font-bold mb-6 text-center text-white">Visit Our Store</h2>
          
          <div className="bg-gray-800 p-6 rounded-lg shadow-lg">
            <h3 className="text-xl font-semibold mb-3 text-white">SkinGlow Flagship Store</h3>
            <p className="mb-2 text-gray-200">123 Skincare Lane</p>
            <p className="mb-2 text-gray-200">Beauty City, ST 12345</p>
            <p className="mb-2 text-gray-200">Phone: (555) 123-4567</p>
            <p className="text-gray-200">Email: contact@skinglow.com</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ContactForm;

================
File: src/app/products/[id]/page.tsx
================
// src/app/products/[id]/page.tsx
'use client';

import { useProduct } from '@/hooks/useProducts';
import { useCart } from '@/contexts/CartContext';
import LoadingSpinner from '@/components/LoadingSpinner';
import ErrorMessage from '@/components/ErrorMessage';
import { Star, ShoppingCart } from 'lucide-react';

export default function ProductDetailPage({ params }: { params: { id: string } }) {
  const { product, isLoading, isError } = useProduct(params.id);
  const { dispatch } = useCart();
  
  if (isLoading) return <LoadingSpinner />;
  if (isError) return <ErrorMessage message="Failed to load product" />;
  if (!product) return <ErrorMessage message="Product not found" />;
  
  const handleAddToCart = () => {
    dispatch({
      type: 'ADD_ITEM',
      payload: {
        id: product.id,
        name: product.name,
        price: product.price,
        quantity: 1,
        image: product.image
      }
    });
  };
  
  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex flex-col md:flex-row gap-8">
        {/* Product Image */}
        <div className="md:w-1/2">
          <img 
            src={product.image} 
            alt={product.name} 
            className="w-full h-auto rounded-lg shadow-md"
          />
        </div>
        
        {/* Product Details */}
        <div className="md:w-1/2">
          <h1 className="text-3xl font-bold mb-2">{product.name}</h1>
          <p className="text-gray-600 mb-4">{product.category}</p>
          
          <div className="flex items-center mb-4">
            {[...Array(5)].map((_, i) => (
              <Star
                key={i}
                className={`w-5 h-5 ${
                  i < Math.floor(product.rating) 
                    ? "text-yellow-400 fill-yellow-400" 
                    : "text-gray-300"
                }`}
              />
            ))}
            <span className="ml-2 text-gray-600">{product.rating}/5</span>
          </div>
          
          <p className="text-2xl font-bold mb-4">${product.price.toFixed(2)}</p>
          
          <div className="mb-6">
            <h2 className="text-xl font-semibold mb-2">Description</h2>
            <p className="text-gray-700">{product.longDescription || product.description}</p>
          </div>
          
          {product.ingredients && (
            <div className="mb-6">
              <h2 className="text-xl font-semibold mb-2">Ingredients</h2>
              <p className="text-gray-700">{product.ingredients}</p>
            </div>
          )}
          
          {product.directions && (
            <div className="mb-6">
              <h2 className="text-xl font-semibold mb-2">How to Use</h2>
              <p className="text-gray-700">{product.directions}</p>
            </div>
          )}
          
          <button 
            onClick={handleAddToCart}
            className="bg-blue-600 text-white py-3 px-6 rounded-lg flex items-center justify-center hover:bg-blue-700 transition duration-300"
          >
            <ShoppingCart className="mr-2" />
            Add to Cart
          </button>
        </div>
      </div>
    </div>
  );
}

================
File: src/app/products/page.tsx
================
// src/app/products/page.tsx
'use client';

import { useState } from "react";
import { useProducts } from "@/hooks/useProducts";
import ProductCard from "@/components/ProductCard";
import LoadingSpinner from "@/components/LoadingSpinner";
import ErrorMessage from "@/components/ErrorMessage";

// Define the Product type
interface Product {
  id: number;
  name: string;
  category: string;
  price: number;
  rating: number;
  image: string;
  description: string;
}

export default function ProductsPage() {
  const { products, isLoading, isError } = useProducts();
  
  if (isLoading) return <LoadingSpinner />;
  if (isError) return <ErrorMessage message="Failed to load products" />;
  
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">Our Products</h1>
      
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {products && products.map((product: Product) => (
          <ProductCard key={product.id} product={product} />
        ))}
      </div>
    </div>
  );
}

================
File: src/app/globals.css
================
@import "tailwindcss";

@theme {
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

:root {
  /* Base Colors */
  --background: #E5D5C3; /* Warm Beige */
  --foreground: #4A4A4A; /* Deep Charcoal */
  
  /* Custom Color Palette */
  --sage-green: #A7B79C;
  --warm-beige: #E5D5C3;
  --stone-gray: #B0A9A0;
  --olive-green: #6B705C;
  --soft-sand: #D9C5B2;
  --deep-charcoal: #4A4A4A;
  
  /* Functional Colors */
  --primary: var(--sage-green);
  --primary-dark: var(--olive-green);
  --primary-light: #B8C5AF; /* Lighter Sage */
  --secondary: var(--stone-gray);
  --accent: var(--soft-sand);
  --neutral: var(--stone-gray);
  --neutral-light: #E8E6E3; /* Lighter Stone */
  
  /* UI Elements */
  --button-bg: var(--olive-green);
  --button-hover: #5A5E4C; /* Darker Olive */
  --button-text: #FFFFFF;
  --card-bg: #FFFFFF;
  --input-bg: #FFFFFF;
  --input-border: var(--stone-gray);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #3A3A3A;
    --foreground: #F5F2EE;
    
    /* Adjusted for Dark Mode */
    --primary: #8A9A80; /* Darker Sage */
    --primary-dark: #555D4A; /* Darker Olive */
    --primary-light: #9DAB91;
    --button-bg: #555D4A;
    --button-hover: #4A4F40;
    --card-bg: #4A4A4A;
    --input-bg: #4A4A4A;
    --input-border: #5A5A5A;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}

/* Custom classes to override existing Tailwind blue classes */
.bg-primary {
  background-color: var(--primary) !important;
}

.bg-primary-dark {
  background-color: var(--primary-dark) !important;
}

.bg-primary-light {
  background-color: var(--primary-light) !important;
}

.text-primary {
  color: var(--primary) !important;
}

.border-primary {
  border-color: var(--primary) !important;
}

.hover\:bg-primary-dark:hover {
  background-color: var(--primary-dark) !important;
}

.hover\:text-primary-light:hover {
  color: var(--primary-light) !important;
}

/* Replace the blue classes */
.bg-blue-800 {
  background-color: var(--primary-dark) !important;
}

.bg-blue-700 {
  background-color: var(--primary-dark) !important;
}

.bg-blue-600 {
  background-color: var(--button-bg) !important;
}

.bg-blue-100 {
  background-color: var(--warm-beige) !important;
}

.bg-blue-50 {
  background-color: var(--soft-sand) !important;
}

.text-blue-600 {
  color: var(--primary-dark) !important;
}

.text-blue-200 {
  color: var(--soft-sand) !important;
}

.hover\:bg-blue-700:hover {
  background-color: var(--button-hover) !important;
}

.hover\:text-blue-800:hover {
  color: var(--primary-dark) !important;
}

.hover\:text-blue-200:hover {
  color: var(--neutral-light) !important;
}

.border-blue-700 {
  border-color: var(--primary-dark) !important;
}

================
File: src/app/layout.tsx
================
// src/app/layout.tsx
import type React from "react"
import "./globals.css"
import type { Metadata } from "next"
import { Inter } from "next/font/google"
import { CartProvider } from "@/contexts/CartContext"
import Navigation from "@/components/Navigation"
import Footer from "@/components/Footer"
import { AuthProvider } from "@/providers/AuthProvider"

const inter = Inter({ subsets: ["latin"] })

export const metadata: Metadata = {
  title: "SkinGlow - Natural Organic Skincare Products",
  description: "Discover your natural beauty with our organic skincare products. SkinGlow offers premium quality, eco-friendly skincare solutions.",
  keywords: "skincare, organic, natural, eco-friendly, beauty products, skin glow",
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <AuthProvider>
          <CartProvider>
            <Navigation />
            {children}
            <Footer />
          </CartProvider>
        </AuthProvider>
      </body>
    </html>
  )
}

================
File: src/app/page.tsx
================
import Image from "next/image"
import Link from "next/link"
import { ArrowRight, ShieldCheck, Leaf, Droplet } from "lucide-react"

export default function HomePage() {
  return (
    <div className="flex flex-col min-h-screen">
      <header className="bg-blue-800 text-white py-4">
        <div className="container mx-auto px-4 flex justify-between items-center">
          <Link href="/" className="text-2xl font-bold">
            SkinGlow
          </Link>
          <nav className="hidden md:flex space-x-6">
            <Link href="/products" className="hover:text-blue-200">
              Products
            </Link>
            <Link href="/about" className="hover:text-blue-200">
              About
            </Link>
            <Link href="/contact" className="hover:text-blue-200">
              Contact
            </Link>
          </nav>
          {/* Mobile Menu Button */}
          <button className="md:hidden text-white focus:outline-none">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
            </svg>
          </button>
        </div>
        {/* Mobile Menu (hidden by default) */}
        <div className="hidden md:hidden">
          <div className="px-2 pt-2 pb-3 space-y-1">
            <Link href="/products" className="block px-3 py-2 text-white hover:bg-blue-700 rounded">
              Products
            </Link>
            <Link href="/about" className="block px-3 py-2 text-white hover:bg-blue-700 rounded">
              About
            </Link>
            <Link href="/contact" className="block px-3 py-2 text-white hover:bg-blue-700 rounded">
              Contact
            </Link>
          </div>
        </div>
      </header>

      <main className="flex-grow">
        {/* Hero Section */}
        <section className="bg-blue-100 py-20">
          <div className="container mx-auto px-4 flex flex-col md:flex-row items-center">
            <div className="md:w-1/2 mb-10 md:mb-0">
              <h1 className="text-4xl md:text-5xl font-bold mb-6">Discover Your Natural Glow</h1>
              <p className="text-xl mb-8">Experience the power of nature with our organic skincare products.</p>
              <Link
                href="/products"
                className="bg-blue-600 text-white py-3 px-6 rounded-full inline-flex items-center hover:bg-blue-700 transition duration-300"
              >
                Shop Now <ArrowRight className="ml-2" />
              </Link>
            </div>
            <div className="md:w-1/2">
              <Image
                src="/placeholder.svg"
                alt="Natural skincare products"
                width={600}
                height={400}
                className="rounded-lg shadow-lg"
              />
            </div>
          </div>
        </section>

        {/* Featured Products */}
        <section className="py-16">
          <div className="container mx-auto px-4">
            <h2 className="text-3xl font-bold mb-10 text-center">Featured Products</h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
              {[
                { name: "Hydrating Facial Cleanser", desc: "Gentle, effective formula suitable for all skin types" },
                { name: "Brightening Serum", desc: "Vitamin C enriched formula to revitalize your complexion" },
                { name: "Rejuvenating Night Cream", desc: "Nourish and repair your skin while you sleep" },
              ].map((product, index) => (
                <div key={index} className="bg-white rounded-lg shadow-md overflow-hidden">
                  <Image
                    src="/placeholder.svg"
                    alt={`Product ${product.name}`}
                    width={400}
                    height={300}
                    className="w-full h-48 object-cover"
                  />
                  <div className="p-6">
                    <h3 className="text-xl font-semibold mb-2">{product.name}</h3>
                    <p className="text-gray-600 mb-4">{product.desc}</p>
                    <Link href="/products" className="text-blue-600 hover:text-blue-800 font-medium">
                      Learn More
                    </Link>
                  </div>
                </div>
              ))}
            </div>
            <div className="text-center mt-10">
              <Link 
                href="/products" 
                className="inline-flex items-center text-blue-600 hover:text-blue-800 font-medium"
              >
                View All Products <ArrowRight className="ml-2 h-4 w-4" />
              </Link>
            </div>
          </div>
        </section>

        {/* Benefits */}
        <section className="bg-blue-50 py-16">
          <div className="container mx-auto px-4">
            <h2 className="text-3xl font-bold mb-10 text-center">Why Choose SkinGlow?</h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
              <div className="flex flex-col items-center text-center">
                <ShieldCheck size={48} className="text-blue-600 mb-4" />
                <h3 className="text-xl font-semibold mb-2">100% Natural</h3>
                <p className="text-gray-600">Our products are made with only the finest natural ingredients, free from harmful chemicals and synthetic additives.</p>
              </div>
              <div className="flex flex-col items-center text-center">
                <Leaf size={48} className="text-blue-600 mb-4" />
                <h3 className="text-xl font-semibold mb-2">Eco-Friendly</h3>
                <p className="text-gray-600">We're committed to sustainable practices and packaging, reducing our environmental footprint with every product.</p>
              </div>
              <div className="flex flex-col items-center text-center">
                <Droplet size={48} className="text-blue-600 mb-4" />
                <h3 className="text-xl font-semibold mb-2">Gentle Formula</h3>
                <p className="text-gray-600">Suitable for all skin types, even the most sensitive, our formulas are dermatologist-tested and hypoallergenic.</p>
              </div>
            </div>
          </div>
        </section>

        {/* Testimonials */}
        <section className="py-16">
          <div className="container mx-auto px-4">
            <h2 className="text-3xl font-bold mb-10 text-center">What Our Customers Say</h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
              {[
                { name: "Jessica T.", comment: "The hydrating cleanser has completely transformed my dry skin. My face feels softer than ever!" },
                { name: "Michael R.", comment: "After trying countless products for my sensitive skin, SkinGlow is the only brand that doesn't cause irritation." },
                { name: "Aisha K.", comment: "I love that these products are eco-friendly and effective. My skin has never looked better!" },
              ].map((testimonial, index) => (
                <div key={index} className="bg-white p-6 rounded-lg shadow-md">
                  <div className="flex items-center mb-4">
                    <div className="w-12 h-12 bg-blue-100 rounded-full mr-4"></div>
                    <div>
                      <h3 className="font-semibold">{testimonial.name}</h3>
                      <div className="flex">
                        {[...Array(5)].map((_, i) => (
                          <svg key={i} className="w-4 h-4 text-yellow-400 fill-current" viewBox="0 0 20 20">
                            <path d="M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z" />
                          </svg>
                        ))}
                      </div>
                    </div>
                  </div>
                  <p className="text-gray-600 italic">"{testimonial.comment}"</p>
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* Newsletter */}
        <section className="py-16">
          <div className="container mx-auto px-4">
            <div className="bg-blue-600 text-white rounded-lg p-8 md:p-12 text-center">
              <h2 className="text-3xl font-bold mb-4">Join Our Newsletter</h2>
              <p className="mb-6">Stay updated with our latest products and exclusive offers.</p>
              <form className="max-w-md mx-auto flex flex-col sm:flex-row">
                <input
                  type="email"
                  placeholder="Enter your email"
                  className="flex-grow px-4 py-2 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-400 text-gray-900 mb-2 sm:mb-0"
                />
                <button
                  type="submit"
                  className="bg-blue-800 px-6 py-2 rounded-r-lg hover:bg-blue-700 transition duration-300 sm:ml-0 sm:rounded-l-none rounded-lg"
                >
                  Subscribe
                </button>
              </form>
            </div>
          </div>
        </section>
      </main>

      <footer className="bg-blue-800 text-white py-8">
        <div className="container mx-auto px-4">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
            <div>
              <h3 className="text-lg font-semibold mb-4">SkinGlow</h3>
              <p className="text-sm">Discover your natural beauty with our organic skincare products.</p>
            </div>
            <div>
              <h4 className="text-lg font-semibold mb-4">Quick Links</h4>
              <ul className="space-y-2">
                <li>
                  <Link href="/products" className="hover:text-blue-200">
                    Products
                  </Link>
                </li>
                <li>
                  <Link href="/about" className="hover:text-blue-200">
                    About Us
                  </Link>
                </li>
                <li>
                  <Link href="/contact" className="hover:text-blue-200">
                    Contact
                  </Link>
                </li>
              </ul>
            </div>
            <div>
              <h4 className="text-lg font-semibold mb-4">Connect</h4>
              <ul className="space-y-2">
                <li>
                  <a href="#" className="hover:text-blue-200">
                    Facebook
                  </a>
                </li>
                <li>
                  <a href="#" className="hover:text-blue-200">
                    Instagram
                  </a>
                </li>
                <li>
                  <a href="#" className="hover:text-blue-200">
                    Twitter
                  </a>
                </li>
              </ul>
            </div>
            <div>
              <h4 className="text-lg font-semibold mb-4">Contact Us</h4>
              <p className="text-sm">
                123 Skincare Lane
                <br />
                Beauty City, ST 12345
                <br />
                contact@skinglow.com
              </p>
            </div>
          </div>
          <div className="mt-8 pt-8 border-t border-blue-700 text-center text-sm">
            &copy; 2025 SkinGlow. All rights reserved.
          </div>
        </div>
      </footer>
    </div>
  )
}

================
File: src/components/AuthProvider.tsx
================
// src/providers/AuthProvider.tsx
'use client';

import { ReactNode } from 'react';

export function AuthProvider({ children }: { children: ReactNode }) {
  // This is a placeholder until you implement NextAuth
  return <>{children}</>;
}

================
File: src/components/CartItem.tsx
================
// src/components/CartItem.tsx
'use client';

import Image from "next/image";
import { Trash2, Plus, Minus } from "lucide-react";
import { useCart } from "@/contexts/CartContext";
import { CartItem as CartItemType } from "@/contexts/CartContext";

interface CartItemProps {
  item: CartItemType;
}

export default function CartItem({ item }: CartItemProps) {
  const { dispatch } = useCart();

  const updateQuantity = (newQuantity: number) => {
    if (newQuantity < 1) return;
    
    dispatch({
      type: 'UPDATE_QUANTITY',
      payload: { id: item.id, quantity: newQuantity }
    });
  };

  const removeItem = () => {
    dispatch({
      type: 'REMOVE_ITEM',
      payload: { id: item.id }
    });
  };

  return (
    <div className="p-4 border-b last:border-0 grid grid-cols-1 md:grid-cols-12 gap-4 items-center">
      <div className="md:col-span-6 flex items-center">
        <div className="w-20 h-20 mr-4 relative">
          <Image
            src={item.image}
            alt={item.name}
            fill
            className="object-cover rounded"
            style={{ objectFit: 'cover' }}
          />
        </div>
        <div>
          <h3 className="font-medium">{item.name}</h3>
          <button 
            onClick={removeItem}
            className="text-sm text-red-600 flex items-center mt-1"
          >
            <Trash2 className="h-3 w-3 mr-1" /> Remove
          </button>
        </div>
      </div>
      
      <div className="md:col-span-2 text-center">
        <div className="md:hidden inline font-medium mr-2">Price:</div>
        ${item.price.toFixed(2)}
      </div>
      
      <div className="md:col-span-2 flex items-center justify-center">
        <div className="md:hidden inline font-medium mr-2">Quantity:</div>
        <div className="flex items-center border rounded">
          <button 
            onClick={() => updateQuantity(item.quantity - 1)}
            className="px-2 py-1 text-gray-600 hover:bg-gray-100"
          >
            <Minus className="h-3 w-3" />
          </button>
          <input
            type="number"
            value={item.quantity}
            onChange={(e) => updateQuantity(parseInt(e.target.value) || 1)}
            className="w-10 text-center border-x focus:outline-none py-1"
          />
          <button 
            onClick={() => updateQuantity(item.quantity + 1)}
            className="px-2 py-1 text-gray-600 hover:bg-gray-100"
          >
            <Plus className="h-3 w-3" />
          </button>
        </div>
      </div>
      
      <div className="md:col-span-2 text-center font-medium">
        <div className="md:hidden inline font-medium mr-2">Total:</div>
        ${(item.price * item.quantity).toFixed(2)}
      </div>
    </div>
  );
}

================
File: src/components/CheckoutButton.tsx
================
// src/components/CheckoutButton.tsx
'use client';

import { useState } from 'react';
import { useCart } from '@/contexts/CartContext';

export default function CheckoutButton() {
  const { state } = useCart();
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  const handleCheckout = async () => {
    setIsLoading(true);
    setError(null);
    
    try {
      const response = await fetch('/api/checkout', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          items: state.items,
        }),
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || 'Something went wrong');
      }
      
      // Redirect to Stripe Checkout
      window.location.href = data.url;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to create checkout session');
    } finally {
      setIsLoading(false);
    }
  };
  
  return (
    <div>
      <button
        onClick={handleCheckout}
        disabled={isLoading || state.items.length === 0}
        className={`w-full py-3 rounded-lg font-medium ${
          isLoading || state.items.length === 0
            ? 'bg-gray-400 cursor-not-allowed'
            : 'bg-blue-600 hover:bg-blue-700'
        } text-white transition duration-300`}
      >
        {isLoading ? 'Processing...' : 'Proceed to Checkout'}
      </button>
      
      {error && (
        <p className="text-red-600 mt-2 text-sm">{error}</p>
      )}
    </div>
  );
}

================
File: src/components/ErrorBoundary.tsx
================
// src/components/ErrorBoundary.tsx
'use client';

import { Component, ErrorInfo, ReactNode } from 'react';

interface Props {
  fallback?: ReactNode;
  children: ReactNode;
}

interface State {
  hasError: boolean;
}

export default class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(_: Error): State {
    return { hasError: true };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error("Error caught by boundary:", error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return this.props.fallback || (
        <div className="p-8 text-center">
          <h2 className="text-2xl font-bold mb-4">Something went wrong</h2>
          <button 
            onClick={() => this.setState({ hasError: false })}
            className="bg-blue-600 text-white px-4 py-2 rounded"
          >
            Try again
          </button>
        </div>
      );
    }

    return this.props.children;
  }
}

================
File: src/components/ErrorMessage.tsx
================
// src/components/ErrorMessage.tsx
interface ErrorMessageProps {
    message: string;
  }
  
  export default function ErrorMessage({ message }: ErrorMessageProps) {
    return (
      <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md my-4">
        <p>{message}</p>
      </div>
    );
  }

================
File: src/components/Footer.tsx
================
import Link from "next/link"
import { Facebook, Instagram, Twitter, Mail } from "lucide-react"

export default function Footer() {
  return (
    <footer className="bg-blue-800 text-white py-8">
      <div className="container mx-auto px-4">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
          <div>
            <h3 className="text-lg font-semibold mb-4">SkinGlow</h3>
            <p className="text-sm mb-4">Discover your natural beauty with our organic skincare products.</p>
            <div className="flex space-x-4">
              <a href="#" className="hover:text-blue-200" aria-label="Facebook">
                <Facebook size={20} />
              </a>
              <a href="#" className="hover:text-blue-200" aria-label="Instagram">
                <Instagram size={20} />
              </a>
              <a href="#" className="hover:text-blue-200" aria-label="Twitter">
                <Twitter size={20} />
              </a>
              <a href="mailto:contact@skinglow.com" className="hover:text-blue-200" aria-label="Email">
                <Mail size={20} />
              </a>
            </div>
          </div>
          
          <div>
            <h4 className="text-lg font-semibold mb-4">Quick Links</h4>
            <ul className="space-y-2">
              <li>
                <Link href="/products" className="hover:text-blue-200">
                  Products
                </Link>
              </li>
              <li>
                <Link href="/about" className="hover:text-blue-200">
                  About Us
                </Link>
              </li>
              <li>
                <Link href="/contact" className="hover:text-blue-200">
                  Contact
                </Link>
              </li>
              <li>
                <Link href="/faq" className="hover:text-blue-200">
                  FAQ
                </Link>
              </li>
            </ul>
          </div>
          
          <div>
            <h4 className="text-lg font-semibold mb-4">Legal</h4>
            <ul className="space-y-2">
              <li>
                <Link href="/privacy" className="hover:text-blue-200">
                  Privacy Policy
                </Link>
              </li>
              <li>
                <Link href="/terms" className="hover:text-blue-200">
                  Terms of Service
                </Link>
              </li>
              <li>
                <Link href="/shipping" className="hover:text-blue-200">
                  Shipping Policy
                </Link>
              </li>
              <li>
                <Link href="/returns" className="hover:text-blue-200">
                  Returns & Refunds
                </Link>
              </li>
            </ul>
          </div>
          
          <div>
            <h4 className="text-lg font-semibold mb-4">Contact Us</h4>
            <address className="text-sm not-italic">
              123 Skincare Lane<br />
              Beauty City, ST 12345<br />
              <a href="tel:+15551234567" className="hover:text-blue-200">
                (555) 123-4567
              </a><br />
              <a href="mailto:contact@skinglow.com" className="hover:text-blue-200">
                contact@skinglow.com
              </a>
            </address>
          </div>
        </div>
        
        <div className="mt-8 pt-8 border-t border-blue-700">
          <div className="flex flex-col md:flex-row justify-between items-center">
            <p className="text-sm">&copy; 2025 SkinGlow. All rights reserved.</p>
            <div className="flex space-x-4 mt-4 md:mt-0">
              <img src="/placeholder.svg" alt="Visa" width={40} height={25} className="h-6" />
              <img src="/placeholder.svg" alt="Mastercard" width={40} height={25} className="h-6" />
              <img src="/placeholder.svg" alt="PayPal" width={40} height={25} className="h-6" />
              <img src="/placeholder.svg" alt="Apple Pay" width={40} height={25} className="h-6" />
            </div>
          </div>
        </div>
      </div>
    </footer>
  )
}

================
File: src/components/LoadingSpinner.tsx
================
// src/components/LoadingSpinner.tsx
export default function LoadingSpinner() {
    return (
      <div className="flex justify-center items-center py-10">
        <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-blue-600"></div>
      </div>
    );
  }

================
File: src/components/Navigation.tsx
================
"use client"

import { useState } from "react"
import Link from "next/link"
import { Menu, X, ShoppingCart, Search, User } from "lucide-react"

export default function Navigation() {
  const [isMenuOpen, setIsMenuOpen] = useState(false)

  return (
    <header className="bg-blue-800 text-white py-4 sticky top-0 z-50">
      <div className="container mx-auto px-4">
        <div className="flex justify-between items-center">
          <Link href="/" className="text-2xl font-bold">
            SkinGlow
          </Link>

          {/* Desktop Navigation */}
          <nav className="hidden md:flex items-center space-x-6">
            <Link href="/products" className="hover:text-blue-200">
              Products
            </Link>
            <Link href="/about" className="hover:text-blue-200">
              About
            </Link>
            <Link href="/contact" className="hover:text-blue-200">
              Contact
            </Link>
          </nav>

          {/* Desktop Icons */}
          <div className="hidden md:flex items-center space-x-4">
            <button className="hover:text-blue-200">
              <Search className="h-5 w-5" />
            </button>
            <Link href="/account" className="hover:text-blue-200">
              <User className="h-5 w-5" />
            </Link>
            <Link href="/cart" className="hover:text-blue-200">
              <div className="relative">
                <ShoppingCart className="h-5 w-5" />
                <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-4 h-4 flex items-center justify-center">
                  0
                </span>
              </div>
            </Link>
          </div>

          {/* Mobile menu button */}
          <div className="flex items-center space-x-4 md:hidden">
            <Link href="/cart" className="hover:text-blue-200">
              <div className="relative">
                <ShoppingCart className="h-5 w-5" />
                <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-4 h-4 flex items-center justify-center">
                  0
                </span>
              </div>
            </Link>
            <button
              onClick={() => setIsMenuOpen(!isMenuOpen)}
              className="text-white focus:outline-none"
            >
              {isMenuOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
            </button>
          </div>
        </div>

        {/* Mobile navigation */}
        {isMenuOpen && (
          <div className="mt-4 md:hidden">
            <div className="flex flex-col space-y-3 py-3">
              <Link
                href="/products"
                className="hover:bg-blue-700 px-3 py-2 rounded"
                onClick={() => setIsMenuOpen(false)}
              >
                Products
              </Link>
              <Link
                href="/about"
                className="hover:bg-blue-700 px-3 py-2 rounded"
                onClick={() => setIsMenuOpen(false)}
              >
                About
              </Link>
              <Link
                href="/contact"
                className="hover:bg-blue-700 px-3 py-2 rounded"
                onClick={() => setIsMenuOpen(false)}
              >
                Contact
              </Link>
              <Link
                href="/account"
                className="hover:bg-blue-700 px-3 py-2 rounded flex items-center"
                onClick={() => setIsMenuOpen(false)}
              >
                <User className="h-5 w-5 mr-2" /> My Account
              </Link>
              <div className="relative mt-2">
                <input
                  type="text"
                  placeholder="Search..."
                  className="w-full rounded-lg px-4 py-2 focus:outline-none text-gray-800"
                />
                <button className="absolute right-3 top-2 text-gray-600">
                  <Search className="h-5 w-5" />
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </header>
  )
}

================
File: src/components/ProductCard.tsx
================
// src/components/ProductCard.tsx
import Image from "next/image";
import Link from "next/link";
import { Star, ShoppingCart } from "lucide-react";
import { useCart } from "@/contexts/CartContext";

interface Product {
  id: number;
  name: string;
  category: string;
  price: number;
  rating: number;
  image: string;
  description: string;
}

interface ProductCardProps {
  product: Product;
}

export default function ProductCard({ product }: ProductCardProps) {
  const { dispatch } = useCart();

  const handleAddToCart = () => {
    dispatch({
      type: 'ADD_ITEM',
      payload: {
        id: product.id,
        name: product.name,
        price: product.price,
        quantity: 1,
        image: product.image
      }
    });
  };

  return (
    <div className="bg-white rounded-lg shadow-md overflow-hidden">
      <Link href={`/products/${product.id}`}>
        <div className="h-48 overflow-hidden">
          <Image
            src={product.image}
            alt={product.name}
            width={400}
            height={300}
            className="w-full h-full object-cover hover:scale-105 transition-transform duration-300"
          />
        </div>
      </Link>
      <div className="p-4">
        <div className="flex justify-between items-start">
          <div>
            <h2 className="text-lg font-semibold mb-1">{product.name}</h2>
            <span className="text-sm text-gray-500">{product.category}</span>
          </div>
          <span className="font-bold text-lg">${product.price.toFixed(2)}</span>
        </div>
        <p className="text-gray-600 mt-2 text-sm">{product.description}</p>
        <div className="flex items-center mt-2">
          <div className="flex mr-2">
            {[...Array(5)].map((_, i) => (
              <Star
                key={i}
                className={`w-4 h-4 ${
                  i < Math.floor(product.rating) 
                    ? "text-yellow-400 fill-yellow-400" 
                    : "text-gray-300"
                }`}
              />
            ))}
          </div>
          <span className="text-sm text-gray-500">{product.rating}/5</span>
        </div>
        <div className="mt-4 flex space-x-2">
          <Link
            href={`/products/${product.id}`}
            className="flex-1 text-center px-3 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
          >
            View Details
          </Link>
          <button 
            onClick={handleAddToCart}
            className="flex items-center justify-center px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
          >
            <ShoppingCart className="w-4 h-4" />
          </button>
        </div>
      </div>
    </div>
  );
}

================
File: src/contexts/CartContext.tsx
================
// src/contexts/CartContext.tsx
'use client';

import { createContext, useContext, useReducer, ReactNode } from 'react';

export type CartItem = {
  id: number;
  name: string;
  price: number;
  quantity: number;
  image: string;
};

interface CartState {
  items: CartItem[];
  totalItems: number;
  subtotal: number;
}

type CartAction = 
  | { type: 'ADD_ITEM'; payload: CartItem }
  | { type: 'UPDATE_QUANTITY'; payload: { id: number; quantity: number } }
  | { type: 'REMOVE_ITEM'; payload: { id: number } }
  | { type: 'CLEAR_CART' };

const CartContext = createContext<{
  state: CartState;
  dispatch: React.Dispatch<CartAction>;
} | undefined>(undefined);

const initialState: CartState = {
  items: [],
  totalItems: 0,
  subtotal: 0
};

function cartReducer(state: CartState, action: CartAction): CartState {
  switch (action.type) {
    case 'ADD_ITEM': {
      const existingItemIndex = state.items.findIndex(item => item.id === action.payload.id);
      
      if (existingItemIndex > -1) {
        const updatedItems = [...state.items];
        updatedItems[existingItemIndex].quantity += action.payload.quantity;
        
        return {
          ...state,
          items: updatedItems,
          totalItems: state.totalItems + action.payload.quantity,
          subtotal: state.subtotal + (action.payload.price * action.payload.quantity)
        };
      }
      
      return {
        ...state,
        items: [...state.items, action.payload],
        totalItems: state.totalItems + action.payload.quantity,
        subtotal: state.subtotal + (action.payload.price * action.payload.quantity)
      };
    }
    
    case 'UPDATE_QUANTITY': {
      const { id, quantity } = action.payload;
      if (quantity < 1) return state;
      
      const existingItem = state.items.find(item => item.id === id);
      if (!existingItem) return state;
      
      const quantityDiff = quantity - existingItem.quantity;
      const updatedItems = state.items.map(item => 
        item.id === id ? { ...item, quantity } : item
      );
      
      return {
        ...state,
        items: updatedItems,
        totalItems: state.totalItems + quantityDiff,
        subtotal: state.subtotal + (existingItem.price * quantityDiff)
      };
    }
    
    case 'REMOVE_ITEM': {
      const existingItem = state.items.find(item => item.id === action.payload.id);
      if (!existingItem) return state;
      
      return {
        ...state,
        items: state.items.filter(item => item.id !== action.payload.id),
        totalItems: state.totalItems - existingItem.quantity,
        subtotal: state.subtotal - (existingItem.price * existingItem.quantity)
      };
    }
    
    case 'CLEAR_CART':
      return initialState;
      
    default:
      return state;
  }
}

export function CartProvider({ children }: { children: ReactNode }) {
  const [state, dispatch] = useReducer(cartReducer, initialState);
  
  return (
    <CartContext.Provider value={{ state, dispatch }}>
      {children}
    </CartContext.Provider>
  );
}

export function useCart() {
  const context = useContext(CartContext);
  if (context === undefined) {
    throw new Error('useCart must be used within a CartProvider');
  }
  return context;
}

================
File: src/hooks/useHook.ts
================
// src/hooks/useProducts.ts
import { useState, useEffect } from 'react';

// Sample product data
const sampleProducts = [
  {
    id: 1,
    name: "Hydrating Facial Cleanser",
    category: "Cleansers",
    price: 18.99,
    rating: 5,
    image: "/placeholder.svg",
    description: "Gentle, effective formula suitable for all skin types"
  },
  {
    id: 2,
    name: "Brightening Serum",
    category: "Serums",
    price: 24.99,
    rating: 4.5,
    image: "/placeholder.svg",
    description: "Vitamin C enriched formula to revitalize your complexion"
  },
  // Add more sample products as needed
];

export function useProducts() {
  const [products, setProducts] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isError, setIsError] = useState(false);

  useEffect(() => {
    // Simulate API call with a delay
    const fetchProducts = async () => {
      try {
        // In a real app, this would be a fetch call to your API
        // const response = await fetch('/api/products');
        // const data = await response.json();
        
        // Using sample data for now
        setTimeout(() => {
          setProducts(sampleProducts);
          setIsLoading(false);
        }, 500);
      } catch (error) {
        setIsError(true);
        setIsLoading(false);
      }
    };

    fetchProducts();
  }, []);

  return { products, isLoading, isError };
}

export function useProduct(id: string | number) {
  const [product, setProduct] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isError, setIsError] = useState(false);

  useEffect(() => {
    // Simulate API call with a delay
    const fetchProduct = async () => {
      try {
        // In a real app, this would be a fetch call to your API
        // const response = await fetch(`/api/products/${id}`);
        // const data = await response.json();
        
        // Using sample data for now
        setTimeout(() => {
          const productId = typeof id === 'string' ? parseInt(id, 10) : id;
          const foundProduct = sampleProducts.find(p => p.id === productId);
          
          if (foundProduct) {
            setProduct(foundProduct);
          } else {
            setIsError(true);
          }
          
          setIsLoading(false);
        }, 500);
      } catch (error) {
        setIsError(true);
        setIsLoading(false);
      }
    };

    if (id) {
      fetchProduct();
    }
  }, [id]);

  return { product, isLoading, isError };
}

================
File: src/hooks/useProducts.ts
================
// src/hooks/useProducts.ts
import useSWR from 'swr';

const fetcher = (url: string) => fetch(url).then(res => res.json());

export function useProducts() {
  const { data, error, isLoading } = useSWR('/api/products', fetcher);
  
  return {
    products: data,
    isLoading,
    isError: error
  };
}

export function useProduct(id: string | number) {
  const { data, error, isLoading } = useSWR(id ? `/api/products/${id}` : null, fetcher);
  
  return {
    product: data,
    isLoading,
    isError: error
  };
}

================
File: src/providers/AuthProvider.tsx
================
// src/providers/AuthProvider.tsx
'use client';

import { SessionProvider } from 'next-auth/react';
import { ReactNode } from 'react';

export function AuthProvider({ children }: { children: ReactNode }) {
  return <SessionProvider>{children}</SessionProvider>;
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*
.env.local
# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: package.json
================
{
  "name": "bare",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "lucide-react": "^0.477.0",
    "next": "15.2.0",
    "next-auth": "^4.24.11",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "swr": "^2.3.2"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.2.0",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================================
End of Codebase
================================================================
